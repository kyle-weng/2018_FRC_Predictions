geom_abline(slope = 0, intercept = 0) +
labs(
x = paste("Predicted margin of victory"),
y = paste("Residual (actual - predicted)"),
title = paste("Residual plot - margin of victory (red - blue) - 2018 Las Vegas Regional")
)
ggplot(data = lv_mod) +
geom_point(mapping = aes(x = difference_score, y = difference_score_predicted)) +
geom_abline(slope = 1, intercept = 0) +
labs(
x = paste("Margin of victory"),
y = paste("Predicted margin of victory"),
title = paste("Predicted vs. actual margin of victory (red - blue) - 2018 Las Vegas Regional")
)
print(fit9)
ggplot(data = lv_mod) +
geom_point(mapping = aes(x = difference_score_predicted,
y = difference_score - difference_score_predicted)) +
geom_abline(slope = 0, intercept = 0) +
labs(
x = paste("Predicted margin of victory"),
y = paste("Residual (actual - predicted)"),
title = paste("Residual plot - margin of victory (red - blue) - 2018 Las Vegas Regional")
)
# maybe the difference thereof will reveal more insights
ggplot() +
geom_jitter(width = 0.1, height = 0.1,
data = filter(lv_mod, winning_alliance == 'red'),
mapping = aes(x = difference_autorun, y = TRUE)) +
geom_jitter(width = 0.1, height = 0.1,
data = filter(lv_mod, winning_alliance == 'blue'),
mapping = aes(x = difference_autorun, y = FALSE)) +
labs(
x = paste("Difference in number of robots (red - blue)"),
y = paste("Winning Alliance"),
title = paste("Difference in number of robots crossing auto line vs. alliance victory - 2018 Las Vegas Regional")
) +
scale_color_manual(values = c("blue", "red")) +
scale_y_discrete(labels = c("Blue", "Red"))
# blue, red autorun vs. victor - exploratory plot
ggplot() +
geom_jitter(width = 0.1, height = 0.1,
data = filter(lv_mod, winning_alliance == 'blue'),
mapping = aes(x = factor(red_autorun),
y = factor(blue_autorun),
color = "Blue victory")) +
geom_jitter(width = 0.1, height = 0.1,
data = filter(lv_mod, winning_alliance == 'red'),
mapping = aes(x = factor(red_autorun),
y = factor(blue_autorun),
color = "Red victory")) +
labs(
x = paste("Number of red robots"),
y = paste("Number of blue robots"),
title = paste("Number of robots that crossed the auto line vs. alliance victory - 2018 Las Vegas Regional")
) +
scale_color_manual(values = c("blue", "red"))
ggplot(data = lv_mod) +
geom_jitter(height = 0.08,
mapping = aes(x = difference_auto, y = red_win)) +
#geom_line(mapping = aes(x = difference_auto, y = fit5_prob)) +
geom_smooth(formula = y ~ x,
mapping = aes(x = difference_auto, y = red_win),
method = "glm", method.args = list(family = 'binomial'), se = TRUE) +
labs(
x = paste("Point difference (Red - Blue)"),
y = paste("Probability that red wins"),
title = paste("Point difference during the autonomous period vs. alliance victory - 2018 Las Vegas Regional")
)
# okay, so now we have a decently promising model. let's try it on some fresh data
# this is from the 2018 aerospace valley regional
av <- read.csv("aerospace_valley_2018.csv") %>% as_tibble(.)
# okay, so now we have a decently promising model. let's try it on some fresh data
# this is from the 2018 aerospace valley regional
av <- read.csv("aerospace_valley_2018.csv") %>% as_tibble(.)
av %<>% mutate(red_autorun = as.integer(score_breakdown_red_autoRobot1 == 'AutoRun') +
as.integer(score_breakdown_red_autoRobot2 == 'AutoRun') +
as.integer(score_breakdown_red_autoRobot3 == 'AutoRun'),
blue_autorun = as.integer(score_breakdown_blue_autoRobot1 == 'AutoRun') +
as.integer(score_breakdown_blue_autoRobot2 == 'AutoRun') +
as.integer(score_breakdown_blue_autoRobot3 == 'AutoRun'),
red_climb = as.integer(score_breakdown_red_endgameRobot1 == 'Climbing') +
as.integer(score_breakdown_red_endgameRobot2 == 'Climbing') +
as.integer(score_breakdown_red_endgameRobot3 == 'Climbing'),
blue_climb = as.integer(score_breakdown_blue_endgameRobot1 == 'Climbing') +
as.integer(score_breakdown_blue_endgameRobot2 == 'Climbing') +
as.integer(score_breakdown_blue_endgameRobot3 == 'Climbing'),
blue_cubes = score_breakdown_blue_vaultPoints / 5,
red_cubes = score_breakdown_red_vaultPoints / 5,
difference_score = score_breakdown_red_totalPoints -
score_breakdown_blue_totalPoints)
# logistic version of fit9
fit10 <- stan_glm(red_win ~ red_autorun + blue_autorun +
red_climb + blue_climb + blue_cubes + red_cubes,
family = binomial(link = 'logit'), data = lv_mod, refresh = 0)
print(fit10)
ggplot(data = lv_mod) +
geom_point(mapping = aes(x = difference_score, y = difference_score_predicted)) +
geom_abline(slope = 1, intercept = 0) +
labs(
x = paste("Margin of victory"),
y = paste("Predicted margin of victory"),
title = paste("Predicted vs. actual margin of victory (red - blue) - 2018 Las Vegas Regional")
)
ggplot(data = lv_mod) +
geom_point(mapping = aes(x = difference_score_predicted,
y = difference_score - difference_score_predicted)) +
geom_abline(slope = 0, intercept = 0) +
labs(
x = paste("Predicted margin of victory"),
y = paste("Residual (actual - predicted)"),
title = paste("Residual plot - margin of victory (red - blue) - 2018 Las Vegas Regional")
)
ggplot(data = av) +
geom_point(mapping = aes(x = difference_score, y = difference_score_predicted)) +
geom_abline(slope = 1, intercept = 0) +
labs(
x = paste("Margin of victory"),
y = paste("Predicted margin of victory"),
title = paste("Predicted vs. actual margin of victory (red - blue) - 2018 Aerospace Valley Regional")
)
av$difference_score_predicted <- colMeans(posterior_predict(fit9, newdata = av))
ggplot(data = av) +
geom_point(mapping = aes(x = difference_score, y = difference_score_predicted)) +
geom_abline(slope = 1, intercept = 0) +
labs(
x = paste("Margin of victory"),
y = paste("Predicted margin of victory"),
title = paste("Predicted vs. actual margin of victory (red - blue) - 2018 Aerospace Valley Regional")
)
ggplot(data = av) +
geom_point(mapping = aes(x = difference_score_predicted,
y = difference_score - difference_score_predicted)) +
geom_abline(slope = 0, intercept = 0) +
labs(
x = paste("Predicted margin of victory"),
y = paste("Residual (actual - predicted)"),
title = paste("Residual plot - margin of victory (red - blue) - 2018 Aerospace Valley Regional")
)
ggplot(data = av) +
geom_point(mapping = aes(x = difference_score, y = difference_score_predicted)) +
geom_abline(slope = 1, intercept = 0) +
labs(
x = paste("Margin of victory"),
y = paste("Predicted margin of victory"),
title = paste("Predicted vs. actual margin of victory (red - blue) - 2018 Aerospace Valley Regional")
)
ggplot(data = av) +
geom_point(mapping = aes(x = difference_score_predicted,
y = difference_score - difference_score_predicted)) +
geom_abline(slope = 0, intercept = 0) +
labs(
x = paste("Predicted margin of victory"),
y = paste("Residual (actual - predicted)"),
title = paste("Residual plot - margin of victory (red - blue) - 2018 Aerospace Valley Regional")
)
av %<>% mutate(accurate = as.integer(sign(difference_score) == sign(difference_score_predicted)))
nrow(av)
av_accuracy <- sum(av$accurate) / nrow(av)
av_accuracy
lv %<>% mutate(accurate = as.integer(sign(difference_score) == sign(difference_score_predicted)))
lv_accuracy <- sum(lv$accurate) / nrow(lv)
lv_mod %<>% mutate(accurate = as.integer(sign(difference_score) == sign(difference_score_predicted)))
lv_accuracy <- sum(lv_mod$accurate) / nrow(lv)
lv_accuracy
# more fresh data - hopper divison, houston champs 2018
hp <- read.csv("houston_hopper_2018.csv") %>% as_tibble(.)
hp %<>% mutate(red_autorun = as.integer(score_breakdown_red_autoRobot1 == 'AutoRun') +
as.integer(score_breakdown_red_autoRobot2 == 'AutoRun') +
as.integer(score_breakdown_red_autoRobot3 == 'AutoRun'),
blue_autorun = as.integer(score_breakdown_blue_autoRobot1 == 'AutoRun') +
as.integer(score_breakdown_blue_autoRobot2 == 'AutoRun') +
as.integer(score_breakdown_blue_autoRobot3 == 'AutoRun'),
red_climb = as.integer(score_breakdown_red_endgameRobot1 == 'Climbing') +
as.integer(score_breakdown_red_endgameRobot2 == 'Climbing') +
as.integer(score_breakdown_red_endgameRobot3 == 'Climbing'),
blue_climb = as.integer(score_breakdown_blue_endgameRobot1 == 'Climbing') +
as.integer(score_breakdown_blue_endgameRobot2 == 'Climbing') +
as.integer(score_breakdown_blue_endgameRobot3 == 'Climbing'),
blue_cubes = score_breakdown_blue_vaultPoints / 5,
red_cubes = score_breakdown_red_vaultPoints / 5,
difference_score = score_breakdown_red_totalPoints -
score_breakdown_blue_totalPoints)
hp$difference_score_predicted <- colMeans(posterior_predict(fit9, newdata = av))
hp$difference_score_predicted <- colMeans(posterior_predict(fit9, newdata = hp))
ggplot(data = hp) +
geom_point(mapping = aes(x = difference_score, y = difference_score_predicted)) +
geom_abline(slope = 1, intercept = 0) +
labs(
x = paste("Margin of victory"),
y = paste("Predicted margin of victory"),
title = paste("Predicted vs. actual margin of victory (red - blue) - 2018 Aerospace Valley Regional")
)
ggplot(data = hp) +
geom_point(mapping = aes(x = difference_score_predicted,
y = difference_score - difference_score_predicted)) +
geom_abline(slope = 0, intercept = 0) +
labs(
x = paste("Predicted margin of victory"),
y = paste("Residual (actual - predicted)"),
title = paste("Residual plot - margin of victory (red - blue) - 2018 Aerospace Valley Regional")
)
# hopper divison - accuracy
hp %<>% mutate(accurate = as.integer(sign(difference_score) == sign(difference_score_predicted)))
hp_accuracy <- sum(hp$accurate) / nrow(hp)
hp_accuracy
# preliminary graphs
ggplot(data = frc1160_official) +
geom_histogram(mapping = aes(x = alliance_score), bins = 15) +
labs(
x = paste("Score"),
title = paste("Scores of alliances w/ 1160 during the 2018 official season")
)
ggplot(data = frc1160_official) +
geom_jitter(width = 0.05,
mapping = aes(x = as.logical(alliance_autorun_all), y = alliance_score)) +
labs(
x = paste("All robots on the alliance had autorun routine"),
y = paste("Alliance score"),
title = paste("Scores of alliances w/ 1160 by whether all bots had autorun routine")
)
ggplot(data = frc1160_official) +
geom_jitter(width = 0.05,
mapping = aes(x = as.logical(alliance_autorun_all), y = alliance_score)) +
labs(
x = paste("All robots on the alliance had autorun routine"),
y = paste("Alliance score"),
title = paste("Scores of alliances w/ 1160 by whether all bots had autorun routine")
)
# I would've plotted this data as a histogram (or two), but we really don't have enough data
ggplot(data = frc1160_official) +
geom_point(mapping = aes(x = as.logical(event_key == "2018caav"),
y = alliance_score)) +
scale_x_discrete(labels = c("Las Vegas (Week 4)", "Aerospace Valley (week 6)")) +
labs(
x = paste("Regional and week (of regular competition season)"),
y = paste("Alliance score"),
title = paste("Scores of alliances w/ 1160 by competition")
)
nrow(teams)
se(fit9)
coef(fit9)
source('J:/Academic Archives/FA 2020/IDSEcPs 126/Project/project_final.R')
# preliminary graphs
ggplot(data = frc1160_official) +
geom_histogram(mapping = aes(x = alliance_score), bins = 15) +
labs(
x = paste("Score"),
title = paste("Scores of alliances w/ 1160 during the 2018 official season")
)
ggplot(data = frc1160_official) +
geom_jitter(width = 0.05,
mapping = aes(x = as.logical(alliance_autorun_all), y = alliance_score)) +
labs(
x = paste("All robots on the alliance had autorun routine"),
y = paste("Alliance score"),
title = paste("Scores of alliances w/ 1160 by whether all bots had autorun routine")
)
ggplot(data = frc1160_official) +
geom_jitter(width = 0.05,
mapping = aes(x = as.logical(alliance_autorun_all), y = alliance_score)) +
labs(
x = paste("All robots on the alliance had autorun routine"),
y = paste("Alliance score"),
title = paste("Scores of alliances w/ 1160 by whether all bots had autorun routine")
)
# preliminary graphs
ggplot(data = frc1160_official) +
geom_histogram(mapping = aes(x = alliance_score), bins = 15) +
labs(
x = paste("Score"),
title = paste("Scores of alliances w/ 1160 during the 2018 official season")
)
ggplot(data = frc1160_official) +
geom_jitter(width = 0.05,
mapping = aes(x = as.logical(alliance_autorun_all), y = alliance_score)) +
labs(
x = paste("All robots on the alliance had autorun routine"),
y = paste("Alliance score"),
title = paste("Scores of alliances w/ 1160 by whether all bots had autorun routine")
)
# I would've plotted this data as a histogram (or two), but we really don't have enough data
ggplot(data = frc1160_official) +
geom_point(mapping = aes(x = as.logical(event_key == "2018caav"),
y = alliance_score)) +
scale_x_discrete(labels = c("Las Vegas (Week 4)", "Aerospace Valley (week 6)")) +
labs(
x = paste("Regional and week (of regular competition season)"),
y = paste("Alliance score"),
title = paste("Scores of alliances w/ 1160 by competition")
)
# more preliminary graphs -- foul count
ggplot(data = lv) +
geom_jitter(width = 0.15,
mapping = aes(x = score_breakdown_red_foulCount, y = alliances_red_score)) +
geom_jitter(width = 0.15,
mapping = aes(x = score_breakdown_blue_foulCount, y = alliances_blue_score)) +
labs(
x = paste("Number of fouls called during match"),
y = paste("Final score"),
title = paste("Score vs. number of fouls called against alliance - 2018 Las Vegas Regional")
)
ggplot(data = lv_mod) +
geom_jitter(height = 0.08,
mapping = aes(x = difference_auto, y = red_win)) +
#geom_line(mapping = aes(x = difference_auto, y = fit5_prob)) +
geom_smooth(formula = y ~ x,
mapping = aes(x = difference_auto, y = red_win),
method = "glm", method.args = list(family = 'binomial'), se = TRUE) +
labs(
x = paste("Point difference (Red - Blue)"),
y = paste("Probability that red wins"),
title = paste("Point difference during the autonomous period vs. alliance victory - 2018 Las Vegas Regional")
)
# blue, red autorun vs. victor - exploratory plot
ggplot() +
geom_jitter(width = 0.1, height = 0.1,
data = filter(lv_mod, winning_alliance == 'blue'),
mapping = aes(x = factor(red_autorun),
y = factor(blue_autorun),
color = "Blue victory")) +
geom_jitter(width = 0.1, height = 0.1,
data = filter(lv_mod, winning_alliance == 'red'),
mapping = aes(x = factor(red_autorun),
y = factor(blue_autorun),
color = "Red victory")) +
labs(
x = paste("Number of red robots"),
y = paste("Number of blue robots"),
title = paste("Number of robots that crossed the auto line vs. alliance victory - 2018 Las Vegas Regional")
) +
scale_color_manual(values = c("blue", "red"))
# maybe the difference thereof will reveal more insights
ggplot() +
geom_jitter(width = 0.1, height = 0.1,
data = filter(lv_mod, winning_alliance == 'red'),
mapping = aes(x = difference_autorun, y = TRUE)) +
geom_jitter(width = 0.1, height = 0.1,
data = filter(lv_mod, winning_alliance == 'blue'),
mapping = aes(x = difference_autorun, y = FALSE)) +
labs(
x = paste("Difference in number of robots (red - blue)"),
y = paste("Winning Alliance"),
title = paste("Difference in number of robots crossing auto line vs. alliance victory - 2018 Las Vegas Regional")
) +
scale_color_manual(values = c("blue", "red")) +
scale_y_discrete(labels = c("Blue", "Red"))
ggplot(data = lv_mod) +
geom_point(mapping = aes(x = difference_score, y = difference_score_predicted)) +
geom_abline(slope = 1, intercept = 0) +
labs(
x = paste("Margin of victory"),
y = paste("Predicted margin of victory"),
title = paste("Predicted vs. actual margin of victory (red - blue) - 2018 Las Vegas Regional")
)
ggplot(data = lv_mod) +
geom_point(mapping = aes(x = difference_score_predicted,
y = difference_score - difference_score_predicted)) +
geom_abline(slope = 0, intercept = 0) +
labs(
x = paste("Predicted margin of victory"),
y = paste("Residual (actual - predicted)"),
title = paste("Residual plot - margin of victory (red - blue) - 2018 Las Vegas Regional")
)
ggplot(data = av) +
geom_point(mapping = aes(x = difference_score, y = difference_score_predicted)) +
geom_abline(slope = 1, intercept = 0) +
labs(
x = paste("Margin of victory"),
y = paste("Predicted margin of victory"),
title = paste("Predicted vs. actual margin of victory (red - blue) - 2018 Aerospace Valley Regional")
)
ggplot(data = av) +
geom_point(mapping = aes(x = difference_score_predicted,
y = difference_score - difference_score_predicted)) +
geom_abline(slope = 0, intercept = 0) +
labs(
x = paste("Predicted margin of victory"),
y = paste("Residual (actual - predicted)"),
title = paste("Residual plot - margin of victory (red - blue) - 2018 Aerospace Valley Regional")
)
ggplot(data = hp) +
geom_point(mapping = aes(x = difference_score, y = difference_score_predicted)) +
geom_abline(slope = 1, intercept = 0) +
labs(
x = paste("Margin of victory"),
y = paste("Predicted margin of victory"),
title = paste("Predicted vs. actual margin of victory (red - blue) - 2018 Aerospace Valley Regional")
)
ggplot(data = hp) +
geom_point(mapping = aes(x = difference_score, y = difference_score_predicted)) +
geom_abline(slope = 1, intercept = 0) +
labs(
x = paste("Margin of victory"),
y = paste("Predicted margin of victory"),
title = paste("Predicted vs. actual margin of victory (red - blue) - 2018 Houston Championships, Hopper Divison")
)
ggplot(data = hp) +
geom_point(mapping = aes(x = difference_score_predicted,
y = difference_score - difference_score_predicted)) +
geom_abline(slope = 0, intercept = 0) +
labs(
x = paste("Predicted margin of victory"),
y = paste("Residual (actual - predicted)"),
title = paste("Residual plot - margin of victory (red - blue) - 2018 Aerospace Valley Regional")
)
ggplot(data = hp) +
geom_point(mapping = aes(x = difference_score_predicted,
y = difference_score - difference_score_predicted)) +
geom_abline(slope = 0, intercept = 0) +
labs(
x = paste("Predicted margin of victory"),
y = paste("Residual (actual - predicted)"),
title = paste("Residual plot - margin of victory (red - blue) - 2018 Houston Championships, Hopper Divison")
)
ppc_dens_overlay(lv_mod$difference_score, lv_margin_rep[1:100,]) +
scale_y_continuous(breaks = NULL)
# posterior predictive checking - las vegas - distribution of victory margins
lv_margin_rep <- posterior_predict(fit9)
ppc_dens_overlay(lv_mod$difference_score, lv_margin_rep[1:100,]) +
scale_y_continuous(breaks = NULL)
pp_check(fit9)
av_margin_rep <- posterior_predict(fit9, newdata = av)
# posterior predictive checking - las vegas - distribution of victory margins
lv_margin_rep <- posterior_predict(fit9)
ppc_dens_overlay(lv_mod$difference_score, lv_margin_rep[1:100,]) +
scale_y_continuous(breaks = NULL) +
labs(title = paste("Density estimate of Las Vegas data and 100 replications"))
av_margin_rep <- posterior_predict(fit9, newdata = av)
ppc_dens_overlay(av$difference_score, av_margin_rep[1:100,]) +
scale_y_continuous(breaks = NULL) +
labs(title = paste("Density estimate of Aerospace Valley data and 100 replications"))
# Hopper
hp_margin_rep <- posterior_predict(fit9, newdata = hp)
ppc_dens_overlay(hp$difference_score, hp_margin_rep[1:100,]) +
scale_y_continuous(breaks = NULL) +
labs(title = paste("Density estimate of Hopper Division data and 100 replications"))
# posterior predictive checking - las vegas - distribution of victory margins
lv_margin_rep <- posterior_predict(fit9)
ppc_dens_overlay(lv_mod$difference_score, lv_margin_rep[1:1000,]) +
scale_y_continuous(breaks = NULL) +
labs(title = paste("Density estimate of Las Vegas data and 100 replications"))
ppc_dens_overlay(lv_mod$difference_score, lv_margin_rep[1:100,]) +
scale_y_continuous(breaks = NULL) +
labs(title = paste("Density estimate of Las Vegas victory margin data and 100 replications"),
x = paste("Margin of victory (red - blue)"))
ppc_dens_overlay(av$difference_score, av_margin_rep[1:100,]) +
scale_y_continuous(breaks = NULL) +
labs(title = paste("Density estimate of Aerospace Valley victory margin data and 100 replications"),
x = paste("Margin of victory (red - blue)"))
ppc_dens_overlay(hp$difference_score, hp_margin_rep[1:100,]) +
scale_y_continuous(breaks = NULL) +
labs(title = paste("Density estimate of Hopper Division victory margin data and 100 replications"),
x = paste("Margin of victory (red - blue)"))
print(fit9)
# blue, red autorun vs. victor - exploratory plot
ggplot() +
geom_jitter(width = 0.1, height = 0.1,
data = filter(lv_mod, winning_alliance == 'blue'),
mapping = aes(x = factor(red_autorun),
y = factor(blue_autorun),
color = "Blue victory")) +
geom_jitter(width = 0.1, height = 0.1,
data = filter(lv_mod, winning_alliance == 'red'),
mapping = aes(x = factor(red_autorun),
y = factor(blue_autorun),
color = "Red victory")) +
labs(
x = paste("Number of red robots"),
y = paste("Number of blue robots"),
title = paste("Number of robots that crossed the auto line vs. alliance victory - 2018 Las Vegas Regional")
) +
scale_color_manual(values = c("blue", "red"))
ggplot(data = lv_mod) +
geom_jitter(height = 0.08,
mapping = aes(x = difference_auto, y = red_win)) +
#geom_line(mapping = aes(x = difference_auto, y = fit5_prob)) +
geom_vline(intercept = 0) +
geom_smooth(formula = y ~ x,
mapping = aes(x = difference_auto, y = red_win),
method = "glm", method.args = list(family = 'binomial'), se = TRUE) +
labs(
x = paste("Point difference (Red - Blue)"),
y = paste("Probability that red wins"),
title = paste("Point difference during the autonomous period vs. alliance victory - 2018 Las Vegas Regional")
)
ggplot(data = lv_mod) +
geom_jitter(height = 0.08,
mapping = aes(x = difference_auto, y = red_win)) +
#geom_line(mapping = aes(x = difference_auto, y = fit5_prob)) +
geom_vline(0) +
geom_smooth(formula = y ~ x,
mapping = aes(x = difference_auto, y = red_win),
method = "glm", method.args = list(family = 'binomial'), se = TRUE) +
labs(
x = paste("Point difference (Red - Blue)"),
y = paste("Probability that red wins"),
title = paste("Point difference during the autonomous period vs. alliance victory - 2018 Las Vegas Regional")
)
ggplot(data = lv_mod) +
geom_jitter(height = 0.08,
mapping = aes(x = difference_auto, y = red_win)) +
#geom_line(mapping = aes(x = difference_auto, y = fit5_prob)) +
geom_vline(xintercept = 0) +
geom_smooth(formula = y ~ x,
mapping = aes(x = difference_auto, y = red_win),
method = "glm", method.args = list(family = 'binomial'), se = TRUE) +
labs(
x = paste("Point difference (Red - Blue)"),
y = paste("Probability that red wins"),
title = paste("Point difference during the autonomous period vs. alliance victory - 2018 Las Vegas Regional")
)
